AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFront origin security with Cognito, AWS WAF and AWS Secrets Manager

Parameters:
  SBucketName:
    Type: String
    Description: S3 Bucket where you upload 3 Lambda deployment packages (.zip file)
  ApiGatewayURL:
    Type: String
    Description: Your API's invoke URL WITH stage name
  HeaderName:
    Default: X-Origin-Verify
    Description: Header name for secret string.
    Type: String
  WAFRulePriority:
    Default: "0"
    Description: Rule number to use for regional WAF web ACL. 0 is recommended.
    Type: Number

Resources:
  # Cognito for API Gateway Authorization
  WAUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Join
        - ''
        - - WAUserPool-
          - !Select [2, !Split ['/', !Ref AWS::StackId]]
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
  WAUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Join
        - ''
        - - WAUserPoolClient-
          - !Select [2, !Split ['/', !Ref AWS::StackId]]
      GenerateSecret: true
      UserPoolId: !Ref WAUserPool
      AllowedOAuthFlows:
          - code
          - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - 'https://example.com/callback'
      DefaultRedirectURI: 'https://example.com/callback'
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      LogoutURLs:
        - 'https://example.com/signout'
      UserPoolId: !Ref WAUserPool
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED
  WACognitoUserPoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref WAUserPool
      Domain: !Join
        - ''
        - - walab-
          - !Select [2, !Split ['/', !Ref AWS::StackId]]

  # Reference: https://github.com/aws-samples/amazon-cloudfront-waf-secretsmanager
  # CLOUDFRONT DISTRIBUTION with origin custom header
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    #DependsOn: apiGateway
    Properties:
      DistributionConfig:
        Comment: 'CDN with Origin Custom Header generated by Secrets Manager'
        WebACLId: !GetAtt wafACLG.Arn
        Origins:
          #- DomainName: !Select [1, !Split ['//', !Ref ApiGatewayURL]]
          - DomainName: !Select [2, !Split ['/', !Ref ApiGatewayURL]]  #without :: and stage name
            OriginPath: !Sub  #stage name as path
              - '/${stage}'
              - stage: !Select [3, !Split ['/', !Ref ApiGatewayURL]]
            Id: !Sub
              - "Custom-${apiurl}"
              - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginSSLProtocols:
                - TLSv1.2
              OriginProtocolPolicy: https-only  #API Gateway doesn't support unencrypted (HTTP) endpoints
            # User will complete the following custom header in console
            #OriginCustomHeaders:
            #  - HeaderName: !Ref HeaderName
            #    HeaderValue: !Join ['', ['{{resolve:secretsmanager:', !Ref OriginVerifyHeader, ':SecretString:HEADERVALUE}}' ]]

        Enabled: true
        HttpVersion: 'http2'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            #- DELETE
            #- OPTIONS
            #- PATCH
            #- POST
            #- PUT
          SmoothStreaming: false
          TargetOriginId: !Sub
              - "Custom-${apiurl}"
              - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
          ForwardedValues:
            #API Gateway needs Authorization header with ID token generated by Cognito
            #Headers:
            #  - Authorization

            # accept query string
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
  # generate random X-Origin-Verify header value using Secrets Manager
  OriginVerifyHeader:
    Type: 'AWS::SecretsManager::Secret'
    Description: 'Randomly generated header'
    Properties:
      Description: 'Origin Custom Header value for CloudFront'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"HEADERVALUE": "RandomHeader"}'
        GenerateStringKey: "HEADERVALUE"
        ExcludePunctuation: true

  RotateFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OriginSecretRotateFunction
      Action: lambda:InvokeFunction
      Principal: 'secretsmanager.amazonaws.com'

  OriginVerifyRotateSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      RotationLambdaARN: !GetAtt OriginSecretRotateFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 7
      SecretId: !Ref OriginVerifyHeader

  # rotate header using Secrets Manager and it referrs to RotationRules
  PythonRequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref SBucketName
        S3Key: python-requests-lambda-layer.zip
      Description: Python requests module and deps
      LayerName: !Join ["-" , [!Ref 'AWS::StackName', python-requests]]

  OriginSecretRotateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Serets Manager Rotation Lambda
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Layers:
        - !Ref PythonRequestsLayer
      #VpcConfig: # For accessing RDS instance
      #  SecurityGroupIds:
      #    - !Ref LambdaSecurityGroup
      #  SubnetIds:
      #    - !Ref WAprivateLambdaSubnet1
      Environment:
        Variables:
          WAFACLID: !GetAtt wafACLR.Id
          WAFACLNAME: !Select [0, !Split ['|', !Ref 'wafACLR']]
          WAFRULEPRI: !Ref WAFRulePriority
          CFDISTROID: !Ref CloudFrontDistribution
          HEADERNAME: !Ref HeaderName
          ORIGINURL: !Ref ApiGatewayURL
          STACKNAME: !Ref AWS::StackName
          AWSREGION: !Ref AWS::Region
      Role: !GetAtt OriginSecretRotateExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SBucketName
        S3Key: python-requests-lambda-layer.zip

  OriginSecretRotateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: OriginVerifyRotatePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*OriginSecretRotateFunction*'
          - Effect: Allow
            Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            - secretsmanager:PutSecretValue
            - secretsmanager:UpdateSecretVersionStage
            Resource: !Ref OriginVerifyHeader
          - Effect: Allow
            Action:
            - secretsmanager:GetRandomPassword
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudfront:GetDistribution
            - cloudfront:GetDistributionConfig
            - cloudfront:ListDistributions
            - cloudfront:UpdateDistribution
            Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
            #Resource: 'arn:aws:cloudfront::472961839202:distribution/EOC08E7009A8P' #test
          - Effect: Allow
            Action:
            - wafv2:*
            Resource: !GetAtt wafACLR.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  #Create WAF to evaluate Origin Custom Header. This will be associated with API Gateway
  wafACLR:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${AWS::StackName}-ACLR'
      Scope: REGIONAL
      DefaultAction:
          Block: {}
      VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${AWS::StackName}-ACLMetricR'
      Rules:
          - Name: !Sub '${AWS::StackName}-XRule'
            Priority: !Ref WAFRulePriority
            Action:
              Allow: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-XMetric'
            Statement:
              OrStatement:
                Statements:
                - ByteMatchStatement:
                    FieldToMatch:
                      SingleHeader:
                        Name: !Ref HeaderName
                    PositionalConstraint: EXACTLY
                    SearchString: !Join ['', ['{{resolve:secretsmanager:', !Ref OriginVerifyHeader, ':SecretString:HEADERVALUE}}' ]]
                    TextTransformations:
                      - Priority: 0
                        Type: NONE
                - ByteMatchStatement:
                    FieldToMatch:
                      SingleHeader:
                        Name: !Ref HeaderName
                    PositionalConstraint: EXACTLY
                    SearchString: !Join ['', ['{{resolve:secretsmanager:', !Ref OriginVerifyHeader, ':SecretString:HEADERVALUE}}' ]]
                    TextTransformations:
                      - Priority: 0
                        Type: NONE

  #Have another ACL with CloudFront to prevent API Gatewy from SQL injection attacks or
  #For AWS CloudFront, don't use 'AWS::WAFv2::WebACLAssociation'. Instead, use your CloudFront distribution configuration.
  wafACLG:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${AWS::StackName}-ACLG'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${AWS::StackName}-ACLMetricG'

## Associate WAF ACL with API Gageway.
  wafAPIGWAssociation:
    DependsOn: wafACLR
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
          !Sub
          - 'arn:aws:apigateway:${AWS::Region}::/restapis/${rest_api_id}/stages/${stage_name}'
          - rest_api_id: !Select [0, !Split ['.' , !Select [2, !Split ['/', !Ref ApiGatewayURL]]]]
            stage_name: !Select [3, !Split ['/', !Ref ApiGatewayURL]]
      WebACLArn: !GetAtt wafACLR.Arn

Outputs:
  CognitoUserPoolID:
    Value: !Ref WAUserPool
    Description: User Pool ID
  CognitoAppClientID:
    Value: !Ref WAUserPoolClient
    Description: App Client ID
  CognitoSignupURL:
    Description: Firstly, please do sign up for API Authorization
    Value: !Join
      - ''
      - - https://
        - walab-
        - !Select [2, !Split ['/', !Ref AWS::StackId]]
        - !Sub '.auth.${AWS::Region}.amazoncognito.com/login?client_id='
        - !Ref WAUserPoolClient
        - '&response_type=code&scope=aws.cognito.signin.user.admin+email+openid&redirect_uri=https://example.com/callback'
  CloudFrontConsole:
      Description: CloudFront console
      Value: !Sub https://console.aws.amazon.com/cloudfront/home?region=${AWS::Region}#
  CloudFrontEndpoint:
      Description: Use this endpoint instead of API Gateway endpoint
      Value: !Join ['', ['https://', !GetAtt 'CloudFrontDistribution.DomainName', '/?id=1']]
  #OriginSecretRotateFunction:
  #  Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${OriginSecretRotateFunction}
  #  Description: Secrets Manager Rotation Lambda Function
  OriginVerifyHeaderName:
    Description: Origin Header Name in CloudFront
    Value: !Ref HeaderName
  OriginVerifyHeader:
    Description: Origin Header for Origin Validation
    Value: !Sub https://console.aws.amazon.com/secretsmanager/home?region=${AWS::Region}#/secret?name=${OriginVerifyHeader}
  WAFWebACLR:
    Description: Regional WAF Web ACL associated with test website
    Value: !Join ['', ['https://console.aws.amazon.com/wafv2/homev2/web-acl/', !Select [0, !Split ['|', !Ref 'wafACLR']], '/', !GetAtt 'wafACLR.Id', '/overview?region=', !Sub '${AWS::Region}']]
  WAFWebACLG:
    Description: Global WAF Web ACL associated with test website
    Value: !Join ['', ['https://console.aws.amazon.com/wafv2/homev2/web-acl/', !Select [0, !Split ['|', !Ref 'wafACLG']], '/', !GetAtt 'wafACLG.Id', '/overview?region=global']]